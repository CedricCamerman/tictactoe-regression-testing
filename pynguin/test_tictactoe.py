import sys
import os

# Add the parent directory to the system path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tictactoe as module_0
import tictactoe_states as module_1




def test_case_0():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    tic_tac_toe_0.winOnRow(tic_tac_toe_0, tic_tac_toe_0, tic_tac_toe_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    tic_tac_toe_0.winOnCol(tic_tac_toe_0, tic_tac_toe_0, tic_tac_toe_0)


def test_case_3():
    bool_0 = False
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    var_0 = tic_tac_toe_0.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe_0.board == [
        [False, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 1


@pytest.mark.xfail(strict=True)
def test_case_4():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    none_type_0 = None
    tic_tac_toe_0.winOnDiag(tic_tac_toe_0, none_type_0, tic_tac_toe_0)


def test_case_5():
    bool_0 = True
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    var_0 = tic_tac_toe_0.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, True, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 1


@pytest.mark.xfail(strict=True)
def test_case_6():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    tic_tac_toe_0.moveUser()


def test_case_7():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    var_0 = tic_tac_toe_0.moveComp()


@pytest.mark.xfail(strict=True)
def test_case_8():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    tic_tac_toe_0.main()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    bool_1 = False
    var_0 = tic_tac_toe_0.makeMove(bool_1, bool_0, bool_0)
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, True, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 1
    var_1 = tic_tac_toe_0.winOnRow(bool_0, bool_0, bool_0)
    assert var_1 is False
    var_2 = tic_tac_toe_0.makeMove(bool_0, var_1, var_1)
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, True, module_1.Sign.EMPTY],
        [False, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 2
    var_3 = tic_tac_toe_0.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, True, module_1.Sign.EMPTY],
        [False, True, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 3
    var_4 = tic_tac_toe_0.moveComp()
    sign_0 = module_1.Sign.EMPTY
    var_5 = tic_tac_toe_0.winOnRow(var_1, tic_tac_toe_0, var_3)
    assert var_5 is False
    bool_2 = True
    var_6 = tic_tac_toe_0.makeMove(bool_0, bool_2, sign_0)
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, True, module_1.Sign.EMPTY],
        [False, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 4
    tic_tac_toe_0.main()


def test_case_10():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    sign_0 = module_1.Sign.EMPTY
    bool_0 = False
    var_0 = tic_tac_toe_0.makeMove(bool_0, bool_0, sign_0)
    assert tic_tac_toe_0.numOfMoves == 1


@pytest.mark.xfail(strict=True)
def test_case_11():
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    bool_0 = True
    tic_tac_toe_1 = module_0.TicTacToe()
    assert tic_tac_toe_1.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_1.numOfMoves == 0
    var_0 = tic_tac_toe_1.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe_1.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, True, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_1.numOfMoves == 1
    var_1 = tic_tac_toe_1.moveComp()
    sign_0 = module_1.Sign.EMPTY
    bool_1 = False
    var_2 = tic_tac_toe_1.makeMove(bool_0, bool_1, sign_0)
    assert tic_tac_toe_1.numOfMoves == 2
    tic_tac_toe_1.main()


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    tic_tac_toe_0 = module_0.TicTacToe()
    assert (
        f"{type(tic_tac_toe_0).__module__}.{type(tic_tac_toe_0).__qualname__}"
        == "tictactoe.TicTacToe"
    )
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.status == module_1.Status.TURN_USER
    assert tic_tac_toe_0.uSelCol is None
    assert tic_tac_toe_0.uSelRow is None
    assert tic_tac_toe_0.action == module_1.ActionDomain.U_MOVE
    assert tic_tac_toe_0.res == module_1.ResDom.PLAYING
    assert tic_tac_toe_0.numOfMoves == 0
    tic_tac_toe_1 = module_0.TicTacToe()
    assert tic_tac_toe_1.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_1.numOfMoves == 0
    var_0 = tic_tac_toe_0.makeMove(bool_0, bool_0, tic_tac_toe_0)
    assert len(tic_tac_toe_0.board) == 3
    assert tic_tac_toe_0.numOfMoves == 1
    var_1 = tic_tac_toe_0.makeMove(bool_0, bool_0, tic_tac_toe_0)
    assert tic_tac_toe_0.numOfMoves == 2
    var_2 = tic_tac_toe_0.makeMove(bool_0, bool_0, var_1)
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, None, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 3
    bool_1 = True
    var_3 = tic_tac_toe_0.makeMove(bool_0, bool_1, var_2)
    assert tic_tac_toe_0.numOfMoves == 4
    var_4 = tic_tac_toe_0.makeMove(bool_0, bool_0, tic_tac_toe_0)
    assert len(tic_tac_toe_0.board) == 3
    assert tic_tac_toe_0.numOfMoves == 5
    var_5 = tic_tac_toe_0.winOnRow(bool_0, var_3, var_3)
    assert var_5 is False
    var_6 = tic_tac_toe_0.makeMove(bool_0, var_5, var_5)
    assert tic_tac_toe_0.numOfMoves == 6
    var_7 = tic_tac_toe_0.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [False, True, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 7
    var_8 = tic_tac_toe_0.moveComp()
    var_9 = tic_tac_toe_0.makeMove(bool_0, bool_1, var_4)
    assert tic_tac_toe_0.board == [
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
        [False, None, module_1.Sign.EMPTY],
        [module_1.Sign.EMPTY, module_1.Sign.EMPTY, module_1.Sign.EMPTY],
    ]
    assert tic_tac_toe_0.numOfMoves == 8
    var_10 = tic_tac_toe_0.winOnRow(var_5, tic_tac_toe_0, var_7)
    bool_2 = True
    var_11 = tic_tac_toe_0.makeMove(bool_0, bool_2, var_4)
    assert tic_tac_toe_0.res == module_1.ResDom.TIE
    assert tic_tac_toe_0.numOfMoves == 9
    var_12 = tic_tac_toe_0.main()
    var_8.moveUser()
