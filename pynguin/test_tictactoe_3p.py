import sys
import os

# Add the parent directory to the system path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tictactoe_3p as module_0


def test_case_0():
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0


def test_case_1():
    bool_0 = True
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    var_0 = tic_tac_toe3_p_0.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [module_0.Sign.EMPTY, True, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 1


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\xd2\xf5\x83j\xcaz"i\x1fh\xea\xdc\xfd'
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    tic_tac_toe3_p_0.winOnCol(bytes_0, bytes_0, bytes_0)


def test_case_3():
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    var_0 = tic_tac_toe3_p_0.winOnDiag(
        tic_tac_toe3_p_0, tic_tac_toe3_p_0, tic_tac_toe3_p_0
    )
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    tic_tac_toe3_p_0.main()


def test_case_5():
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    var_0 = tic_tac_toe3_p_0.moveComp()


def test_case_6():
    bool_0 = False
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    var_0 = tic_tac_toe3_p_0.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [False, module_0.Sign.EMPTY, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 1


def test_case_7():
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    sign_0 = module_0.Sign.EMPTY
    bool_0 = False
    var_0 = tic_tac_toe3_p_0.winOnCol(bool_0, bool_0, sign_0)
    assert var_0 is True
    var_1 = tic_tac_toe3_p_0.makeMove(var_0, var_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [module_0.Sign.EMPTY, False, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 1
    var_2 = tic_tac_toe3_p_0.makeMove(bool_0, var_0, tic_tac_toe3_p_0)
    assert len(tic_tac_toe3_p_0.board) == 4
    assert tic_tac_toe3_p_0.numOfMoves == 2
    var_3 = tic_tac_toe3_p_0.winOnDiag(var_2, var_0, sign_0)
    assert var_3 is True
    var_4 = tic_tac_toe3_p_0.makeMove(var_3, var_3, var_3)
    assert tic_tac_toe3_p_0.numOfMoves == 3


def test_case_8():
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    sign_0 = module_0.Sign.EMPTY
    bool_0 = False
    var_0 = tic_tac_toe3_p_0.winOnCol(bool_0, bool_0, sign_0)
    assert var_0 is True
    var_1 = tic_tac_toe3_p_0.makeMove(var_0, bool_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [False, module_0.Sign.EMPTY, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 1
    var_2 = tic_tac_toe3_p_0.makeMove(var_0, var_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [False, False, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 2
    var_3 = tic_tac_toe3_p_0.makeMove(bool_0, var_0, tic_tac_toe3_p_0)
    assert len(tic_tac_toe3_p_0.board) == 4
    assert tic_tac_toe3_p_0.numOfMoves == 3
    var_4 = tic_tac_toe3_p_0.winOnDiag(var_3, var_0, sign_0)
    assert var_4 is True


def test_case_9():
    bool_0 = False
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    sign_0 = module_0.Sign.EMPTY
    var_0 = tic_tac_toe3_p_0.winOnDiag(bool_0, tic_tac_toe3_p_0, sign_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    sign_0 = module_0.Sign.EMPTY
    bool_1 = False
    var_0 = tic_tac_toe3_p_0.makeMove(bool_1, bool_0, sign_0)
    assert tic_tac_toe3_p_0.numOfMoves == 1
    var_1 = tic_tac_toe3_p_0.makeMove(bool_1, bool_0, tic_tac_toe3_p_0)
    assert len(tic_tac_toe3_p_0.board) == 4
    assert tic_tac_toe3_p_0.numOfMoves == 2
    tic_tac_toe3_p_0.main()


def test_case_11():
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    sign_0 = module_0.Sign.EMPTY
    bool_0 = False
    var_0 = tic_tac_toe3_p_0.makeMove(bool_0, bool_0, sign_0)
    assert tic_tac_toe3_p_0.numOfMoves == 1


def test_case_12():
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    sign_0 = module_0.Sign.EMPTY
    bool_0 = True
    var_0 = tic_tac_toe3_p_0.winOnRow(bool_0, sign_0, bool_0)
    assert var_0 is False
    var_1 = tic_tac_toe3_p_0.makeMove(var_0, bool_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [module_0.Sign.EMPTY, True, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 1
    var_2 = tic_tac_toe3_p_0.makeMove(var_0, var_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [True, True, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 2
    var_3 = tic_tac_toe3_p_0.makeMove(bool_0, var_0, tic_tac_toe3_p_0)
    assert len(tic_tac_toe3_p_0.board) == 4
    assert tic_tac_toe3_p_0.numOfMoves == 3
    var_4 = tic_tac_toe3_p_0.winOnDiag(var_3, var_0, sign_0)
    assert var_4 is True
    var_5 = tic_tac_toe3_p_0.makeMove(var_4, var_4, var_4)
    assert tic_tac_toe3_p_0.numOfMoves == 4


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    sign_0 = module_0.Sign.EMPTY
    bool_1 = False
    var_0 = tic_tac_toe3_p_0.makeMove(bool_1, bool_0, tic_tac_toe3_p_0)
    assert len(tic_tac_toe3_p_0.board) == 4
    assert tic_tac_toe3_p_0.numOfMoves == 1
    none_type_0 = None
    var_1 = tic_tac_toe3_p_0.winOnDiag(none_type_0, tic_tac_toe3_p_0, sign_0)
    var_2 = tic_tac_toe3_p_0.makeMove(bool_0, bool_0, none_type_0)
    assert tic_tac_toe3_p_0.numOfMoves == 2
    var_3 = tic_tac_toe3_p_0.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe3_p_0.numOfMoves == 3
    var_2.moveComp()


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    sign_0 = module_0.Sign.EMPTY
    bool_1 = True
    var_0 = tic_tac_toe3_p_0.makeMove(bool_1, bool_1, bool_1)
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [module_0.Sign.EMPTY, True, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 1
    var_1 = tic_tac_toe3_p_0.makeMove(bool_1, bool_0, sign_0)
    assert tic_tac_toe3_p_0.numOfMoves == 2
    tic_tac_toe3_p_1 = module_0.TicTacToe3P()
    assert tic_tac_toe3_p_1.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_1.numOfMoves == 0
    none_type_0 = None
    var_2 = tic_tac_toe3_p_0.winOnDiag(none_type_0, tic_tac_toe3_p_0, sign_0)
    assert var_2 is True
    var_3 = tic_tac_toe3_p_0.makeMove(bool_0, bool_0, none_type_0)
    assert tic_tac_toe3_p_0.board == [
        [None, module_0.Sign.EMPTY, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [module_0.Sign.EMPTY, True, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 3
    var_4 = tic_tac_toe3_p_0.makeMove(bool_0, bool_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [False, module_0.Sign.EMPTY, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [module_0.Sign.EMPTY, True, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 4
    tic_tac_toe3_p_2 = module_0.TicTacToe3P()
    assert tic_tac_toe3_p_2.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_2.numOfMoves == 0
    var_5 = tic_tac_toe3_p_2.moveComp()
    tic_tac_toe3_p_2.main()


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    bool_1 = False
    int_0 = 3
    var_0 = tic_tac_toe3_p_0.makeMove(int_0, bool_1, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [True, module_0.Sign.EMPTY, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 1
    none_type_0 = None
    var_0.winOnDiag(none_type_0, var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    tic_tac_toe3_p_0 = module_0.TicTacToe3P()
    assert (
        f"{type(tic_tac_toe3_p_0).__module__}.{type(tic_tac_toe3_p_0).__qualname__}"
        == "tictactoe_3p.TicTacToe3P"
    )
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
    ]
    assert tic_tac_toe3_p_0.status == module_0.Status.TURN_USER
    assert tic_tac_toe3_p_0.uSelCol is None
    assert tic_tac_toe3_p_0.uSelRow is None
    assert tic_tac_toe3_p_0.action == module_0.ActionDomain.U_MOVE
    assert tic_tac_toe3_p_0.res == module_0.ResDom.PLAYING
    assert tic_tac_toe3_p_0.numOfMoves == 0
    int_0 = 3
    var_0 = tic_tac_toe3_p_0.makeMove(int_0, bool_0, bool_0)
    assert tic_tac_toe3_p_0.board == [
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
            module_0.Sign.EMPTY,
        ],
        [module_0.Sign.EMPTY, True, module_0.Sign.EMPTY, module_0.Sign.EMPTY],
    ]
    assert tic_tac_toe3_p_0.numOfMoves == 1
    status_0 = module_0.Status.TURN_COMP2
    var_0.makeMove(status_0, var_0, status_0)
